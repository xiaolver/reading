##1 
1.考虑用静态工厂方法替代构造方法
public static Boolean valueOf(boolean b){
	return b?Boolean.TRUE:Boolean.FALSE;
}
优势：
1
有名字
当参数并不描述返回的对象，则有名字的静态工厂更易于使用
eg 返回一个可能为素数的方法
public BigInteger(int bitLength,
                  int certainty,
                  Random rnd)
public static BigInteger probablePrime(int bitLength,
                                       Random rnd)
（看起来没多大作用，如果能记得这个方法的参数，多记个返回也没啥差别吧。。。）
2
与构造方法相比，不需要每次调用都创建一个对象
eg
Boolean.valueof(boolean)
这种方法的对象 equals和==一样
类似Flyweight模式
(感觉像很多单例在一个类里面。。。)
3
 可返回其返回类型的任何子类型的对象 更加灵活
4
返回对象的类可以根据输入参数的不同而不同 声明的返回类型的任何子类都是允许的

eg:
Enumset类中没有公共构造方法，只有静态工厂，在OpenJdk中它们根据底层枚举类型的大小返回两个子类中的一个实例，如果大多数枚举类型具有64或更少的元素，静态工厂将返回一个RegularEnumSet实例 返回一个long类型 如果枚举类型具有65或更多元素，则工厂将返回一个JumboEnumSet实例 返回一个long类型的数组 这两个实现类的存在对于客户是不可见的，如果RegularEnumSet不再为小枚举类提供性能的优势，则可以在未来版本中淘汰。同样未来可能添加EnumSet的别的实现，如果它证明有利于性能。客户既不知道也不关心它们从工厂返回的对象的类别，它们只关心它是EnumSet的一些子类
5
在编写该方法时 返回的对象的类不需要存在，这种灵活的静态工厂方法构成了服务提供者框架的基础，比如java数据库连接API（JDBC）服务提供者框架是提供者实现服务的系统，并且系统使得实现对客户端可用，从而将客户端从实现中分离出来
服务提供者框架中也三个基本组：服务接口，它表示实现，提供者注册API，提供者用来注册实现，以及服务访问API，客户端使用该API获取服务的实例。服务访问API允许客户制定选择实现的标准。
服务提供者框架的一个可选的第四个组件是一个服务提供者接口，它描述了一个生成服务接口实例的工厂对象
1
只提供静态工厂方法的主要限制是，没有公共或受保护构造方法的类不能被子类化，eg Collections框架中不可能将任何方便实现类子类化，它鼓励程序员使用组合而不是继承
2
程序员很难找到它们

##2
2.当构造方法参数过多时使用builder模式
静态工厂和构造方法都有一个限制，它们不能很好的扩展到很多可选参数的情形。eg 包装食品上的营养成分标签的例子。这些标签有几个必须的属性--每次建议的摄入量，每罐的分量。。。。
	可伸缩构造：应该为这样的类编写什么样的构造方法？传统上 cxy使用了可伸缩构造方法模式，这种模式中，只提供了0，1，2，3个参数的构造方法，这样很麻烦，而且很难使用，因为反了之后并不会报错，而是成为了很难找的问题。
	javaBeans模式，调用一个无参构造函数构造对象，调用setter方法设置每个参数，由于构造方法在多次调用中被分割，在构造过程中jb可能处于不一致的状态，没有通过检查构造参数参数的有效性来执行一致性的选项。在不一致的状态下尝试使用对象可能导致与包含bug的代码大相径庭的错误，很难调试。排除了让类不可变的可能性，需要程序员增加工作确保线程安全（通过在对象构建完成时手动冻结对象，不允许解冻前使用，可以减少这些缺点，但这种变体在实践中很难得到使用，而且在运行时会导致错误，因为编译器无法确保程序员在使用对象之前调用freeze方法）
	结合可伸缩和javabean模式的可读性，它是builder模式的一种形式。客户端不直接调用所需的对象，而是调用构造方法或静态工厂，并使用所有必须的参数，并获得一个builder对象。然后，客户端调用builder对象的setter相似方法来设置每个可选参数 最后客户端调用一个无参的build方法来生成对象，该对象通常是不可变的，builder 通常是它所构建的类的一个静态成员类。
##3
3.使用私有构造方法或枚举类实现Singleton属性
单例是一个仅实例化一次的类，单例对象通常表示无状态对象，如函数或一个本质上唯一的系统组件。让一个类成为单例会使测试它的客户变的困难，因为除非实现一个作为它类型的接口，否则不可能用一个模拟实现代替单例

	实现方法1，成员是final修饰的属性
	eg
	public class Elvis {
		public static final Elvis INSTANCE=new Elvis();
		private Elvis(){}
		public void leaveTheBuilding(){}
	}
	私有构造方法只调用一次，来初始化公共静态final Elvis.INSTANCE属性。缺少一个公共的或受保护的构造方法，保证了全局的唯一性，一旦Elvis被初始化，就只会有一个实例。客户端所做的任何事情都不能改变这一点。但pay attention 特权客户端可以使用AccessibleObject.setAccessible方法，以反射方式调用私有构造方法。如果需要防御此攻击，请修改构造函数。使其在请求创建第二个实例时抛出异常。
	实现方法2，公共成员是一个静态的工厂方法
	eg
	public class Elvis {
		private static final Elvis INSTANCE=new Elvis();
		private Elvis(){}
		public static Elvis getInstance(){return INSTANCE;}
		public void leaveTheBuilding(){}
	}
	
	公共属性方法的有点是API明确表示该类是一个单例，公共静态属性是final的。并更简单
	静态工厂方法的有点 可以灵活的改变你的想法，无论该类是否为单例而不必更改其API。工厂方法返回唯一的实例，但是可以修改。比如 返回调用它的每个线程的单独实例。 如果你的应用程序需要它，可以编写一个泛型单例工厂 使用静态工厂的最后一个优点是方法引用可以用supplier egElvis：：instance等同于Supplier<Elvis> 除非与这些有点相关的，否则公共属性方法是可取的
	创建一个使用这两种方法的单例类，仅仅将implements Serializable添加到声明是不够的，为了维护单例的保证，声明所有的实例属性为transient 并提供一个readResolve方法 否则每当序列化被反序列化就会创建一个新的实例
	private Object readResolve(){
	return INSTANCE;
	}
	实现方法3 声明单一元素的枚举类
	public enum Elvis{
	INSTANCE;
	public void leaveTheBuilding(){}
	}
	这种方式类似于公共属性方法，但更简洁，提供了免费的序列化机制，并提供了针对多个实例化的坚固保证，即使是在复杂的序列化或反射攻击下。这种方法可能感觉有点不自然，但是单一元素枚举类通常是实现单例的最佳方式。如果单例必须继承Enum意外的弗雷，就不能使用这种方法。？为啥
##4
4.使用私有构造方法执行非实例化
	偶尔你会想写一个只包含静态方法和静态属性的类，这样的类获得了不好的名声，因为有人滥用这些类来避免面向对象的方式思考，但它们确实有特殊的用途。它们可以用来按照java.lang.Math或java.util.Arrays的方式，把基本类型的值或数组类型上的相关方法组织起来。我们也可以通过Collections的方式，把实现特定借口上面的静态方法进行分组，也包含工厂方法，从java8开始你也可将这些方法放在借口中，嘉定是你编写的借口并可以进行修改。这样的类可以用于在final类上对方法进行分组，因为不能将它们放在子类中。
	这样的实用类不是设计用来被实例化的 ：一个实例是没有意义的。在没有显示构造的情况下编译器提供了一个公共的无参默认构造方法。
	试图通过创建抽象类来强制执行非实例化是行不通的。该类可以被子类化，子类可以被实例化。此外它舞蹈用户认为该类是为继承设计的。不过有一个简单的方法来确保非实例化。只有当类不包含显示构造方法时，才会生成一个默认构造方法，因此可以通过包含一个私有构造方法来实现类的实例化
##5
依赖注入优于硬连接资源
许多类依赖于一个或多个底层资源。例如，拼写检查器依赖于字典。将此类类实现为静态实用工具类并不少见
eg
private class SpellChecker{
	private static final Lexicon dictionary=...;
	private SpellChecker(){}//Noninstantialbe
	public static boolean isValid(String word){...}
	public static List<String> suggestions(String typo){...}
}
builder模式？？？
Flyweight?
伙伴类
